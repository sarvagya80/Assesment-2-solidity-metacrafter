pragma solidity 0.8.18;

contract MyToken {
    
    string public name;
    string public symbol;
    uint public totalSupply;

    
    mapping(address => uint) public balances;

    
    event Mint(address indexed to, uint value);
    
    event Burn(address indexed from, uint value);

    
    constructor(string memory _name, string memory _symbol) {
        name = _name;
        symbol = _symbol;
        totalSupply = 0; 
    }

    
    function mint(address _to, uint _value) public {
        totalSupply += _value;
        balances[_to] += _value;
        emit Mint(_to, _value); 
    }

    
    function burn(address _from, uint _value) public {
        require(balances[_from] >= _value, "Insufficient balance to burn");
        totalSupply -= _value;
        balances[_from] -= _value;
        emit Burn(_from, _value); 
    }

    
    function balanceOf(address _account) public view returns (uint) {
        return balances[_account];
    }

    
    function getTotalSupply() public view returns (uint) {
        return totalSupply;
    }
}
